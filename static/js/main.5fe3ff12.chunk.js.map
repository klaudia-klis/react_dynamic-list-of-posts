{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","api/comments.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","api/users.ts","api/posts.ts","index.tsx"],"names":["PostsList","posts","handleSelectedPost","selectedPost","className","map","post","id","title","type","classNames","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","handleResponse","handleFormVisibility","useState","name","setName","nameError","setNameError","email","setEmail","emailError","setEmailError","setBody","bodyError","setBodyError","responseError","setResponseError","isLoading","setIsLoading","onSubmit","event","preventDefault","postId","trim","catch","finally","htmlFor","placeholder","value","onChange","target","PostDetails","comments","loadingComments","loadingCommentsError","handleDelete","deletingCommentError","isFormVisible","setIsFormVisible","length","comment","href","UserSelector","users","handleSelectedUser","selectedUser","isVisible","setIsVisible","role","user","App","setUsers","setSelectedUser","setPosts","loadingPosts","setLoadingPosts","loadingError","setLoadingError","setSelectedPost","setComments","setLoadingComments","setLoadingCommentsError","setDeletingCommentError","useEffect","userId","findSelectedUser","find","findSelectedPost","filteredComments","filter","deleteComment","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5fe3ff12.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  handleSelectedPost: (id: number) => void,\n  selectedPost: Post | null,\n};\n\nexport const PostsList: React.FC<Props> = (\n  { posts, handleSelectedPost, selectedPost },\n) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => (\n          <tr data-cy=\"Post\" key={post.id}>\n            <td data-cy=\"PostId\">{post.id}</td>\n\n            <td data-cy=\"PostTitle\">\n              {post.title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className={classNames('button is-link', {\n                  'is-light': selectedPost?.id !== post.id,\n                })}\n                onClick={() => handleSelectedPost(post.id)}\n              >\n                {selectedPost?.id !== post.id\n                  ? 'Open'\n                  : 'Close'}\n              </button>\n            </td>\n          </tr>\n\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { addComment } from '../api/comments';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  selectedPost: Post,\n  handleResponse: (data: Comment) => void,\n  handleFormVisibility: () => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = (\n  { selectedPost, handleResponse, handleFormVisibility },\n) => {\n  const [name, setName] = useState<string>('');\n  const [nameError, setNameError] = useState<boolean>(false);\n  const [email, setEmail] = useState<string>('');\n  const [emailError, setEmailError] = useState<boolean>(false);\n  const [body, setBody] = useState<string>('');\n  const [bodyError, setBodyError] = useState<boolean>(false);\n  const [responseError, setResponseError] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const handleSubmit: React.FormEventHandler = (event) => {\n    event.preventDefault();\n\n    if (name === '') {\n      setNameError(true);\n    }\n\n    if (email === '') {\n      setEmailError(true);\n    }\n\n    if (body === '') {\n      setBodyError(true);\n    }\n\n    if (name && email && body) {\n      setIsLoading(true);\n\n      addComment({\n        postId: selectedPost.id,\n        name: name.trim(),\n        email: email.trim(),\n        body,\n      })\n        .then(response => handleResponse(response))\n        .catch(() => {\n          setResponseError(true);\n        })\n        .finally(() => {\n          setIsLoading(false);\n          setName('');\n          setEmail('');\n          setBody('');\n          handleFormVisibility();\n        });\n    }\n  };\n\n  const handleReset = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n\n    handleFormVisibility();\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': nameError,\n            })}\n            value={name}\n            onChange={(event) => {\n              setName(event.target.value);\n              setNameError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': emailError,\n            })}\n            value={email}\n            onChange={(event) => {\n              setEmail(event.target.value);\n              setEmailError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {emailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': bodyError,\n            })}\n            value={body}\n            onChange={(event) => {\n              setBody(event.target.value);\n              setBodyError(false);\n            }}\n          />\n        </div>\n\n        {bodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleReset}\n          >\n            Clear\n          </button>\n        </div>\n        {responseError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Unable to add comment, try again.\n          </p>\n        )}\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const addComment = (data: {\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n}) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n","import React, { useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  selectedPost: Post,\n  comments: Comment[],\n  loadingComments: boolean,\n  loadingCommentsError: boolean,\n  handleResponse: (response: Comment) => void,\n  handleDelete: (id: number) => void,\n  deletingCommentError: boolean,\n};\n\nexport const PostDetails: React.FC<Props> = (\n  {\n    selectedPost,\n    comments,\n    loadingComments,\n    loadingCommentsError,\n    handleResponse,\n    handleDelete,\n    deletingCommentError,\n  },\n) => {\n  const [isFormVisible, setIsFormVisible] = useState<boolean>(false);\n\n  const handleFormVisibility = () => {\n    setIsFormVisible(false);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost.id}: ${selectedPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {loadingComments && <Loader />}\n\n          {loadingCommentsError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {comments.length === 0 && !loadingComments && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {comments.length > 0 && !loadingComments\n          && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n              {comments.map(comment => (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={comment.id}\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDelete(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n\n            </>\n          )}\n\n          {deletingCommentError && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              Unable to add comment, try again.\n            </p>\n          )}\n\n          {!isFormVisible && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsFormVisible(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isFormVisible && (\n          <NewCommentForm\n            selectedPost={selectedPost}\n            handleFormVisibility={handleFormVisibility}\n            handleResponse={handleResponse}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  selectedUser: User | null,\n  handleSelectedUser: (id: number) => void,\n};\n\nexport const UserSelector: React.FC<Props> = (\n  { users, handleSelectedUser, selectedUser },\n) => {\n  const [isVisible, setIsVisible] = useState<boolean>(false);\n\n  const handleDropdown = () => {\n    setIsVisible(!isVisible);\n  };\n\n  const handleClick = (id: number) => {\n    handleSelectedUser(id);\n    setIsVisible(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleDropdown}\n        >\n          {selectedUser === null\n            ? <span>Choose a user</span>\n            : <span>{selectedUser.name}</span>}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isVisible && (\n        <div\n          className=\"dropdown-menu\"\n          id=\"dropdown-menu\"\n          role=\"menu\"\n        >\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <a\n                href={`#user-${user.id}`}\n                className={classNames('dropdown-item', {\n                  'is-active': selectedUser?.id === user.id,\n                })}\n                key={user.id}\n                onClick={() => handleClick(user.id)}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { getUsers } from './api/users';\nimport { getPosts } from './api/posts';\nimport { Post } from './types/Post';\nimport { deleteComment, getComments } from './api/comments';\nimport { Comment } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [loadingPosts, setLoadingPosts] = useState<boolean>(false);\n  const [loadingError, setLoadingError] = useState<boolean>(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [loadingComments, setLoadingComments] = useState<boolean>(false);\n  const [loadingCommentsError, setLoadingCommentsError]\n    = useState<boolean>(false);\n  const [deletingCommentError, setDeletingCommentError]\n    = useState<boolean>(false);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers);\n  }, []);\n\n  const handleSelectedUser = (id: number) => {\n    const findSelectedUser = users.find(user => user.id === id) || null;\n\n    setSelectedUser(findSelectedUser);\n    setLoadingPosts(true);\n\n    getPosts(id)\n      .then(setPosts)\n      .catch(() => {\n        setLoadingError(true);\n      })\n      .finally(() => {\n        setLoadingPosts(false);\n      });\n  };\n\n  const handleSelectedPost = (id: number) => {\n    const findSelectedPost = posts.find(post => post.id === id) || null;\n\n    if (selectedPost?.id !== id) {\n      setSelectedPost(findSelectedPost);\n      setLoadingComments(true);\n\n      getComments(id)\n        .then(setComments)\n        .catch(() => {\n          setLoadingCommentsError(true);\n        })\n        .finally(() => setLoadingComments(false));\n    } else {\n      setSelectedPost(null);\n    }\n  };\n\n  const handleAddComment = (response: Comment) => {\n    setComments([...comments, response]);\n  };\n\n  const handleDeleteComment = (id: number) => {\n    const filteredComments = comments.filter(comment => comment.id !== id);\n\n    setComments(filteredComments);\n    setDeletingCommentError(false);\n\n    deleteComment(id)\n      .catch(() => setDeletingCommentError(true));\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  handleSelectedUser={handleSelectedUser}\n                  selectedUser={selectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {loadingPosts && <Loader />}\n\n                {loadingError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {posts.length === 0 && selectedUser && !loadingPosts\n                  && (\n                    <div\n                      className=\"notification is-warning\"\n                      data-cy=\"NoPostsYet\"\n                    >\n                      No posts yet\n                    </div>\n                  )}\n\n                {posts.length > 0 && selectedUser && !loadingPosts\n                  && (\n                    <PostsList\n                      posts={posts}\n                      handleSelectedPost={handleSelectedPost}\n                      selectedPost={selectedPost}\n                    />\n                  )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost !== null },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost\n              && (\n                <PostDetails\n                  selectedPost={selectedPost}\n                  comments={comments}\n                  loadingComments={loadingComments}\n                  loadingCommentsError={loadingCommentsError}\n                  handleResponse={handleAddComment}\n                  handleDelete={handleDeleteComment}\n                  deletingCommentError={deletingCommentError}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}